{"remainingRequest":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/src/views/AppsSettings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/src/views/AppsSettings.vue","mtime":1549286069630},{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/vuetify-loader/lib/loader.js","mtime":1548745995000},{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r    import mainApi from \"../api/mainApi\";\r\r    export default {\r        name: \"AppsSettings\",\r        data: function () {\r            return {\r                isDisabled: true,\r                snackbar: false,\r                color: \"\",\r                timeout: 6000,\r                valid: true,\r                domains: [],\r                dialog: false,\r                deleteActive: false,\r                newDomain: \"\",\r                snackmsg: \"\",\r                headers: [\r                    {\r                        text: 'Domains',\r                        align: 'left',\r                        sortable: false,\r                        value: 'name'\r                    },\r                    { text: 'Id', value: 'Id'},\r                    { text: 'Status', value: 'Status' },\r                    { text: 'Creation', value: 'Creation' },\r                    { text: 'Settings', value: 'Settings' }\r                ],\r            }\r        },\r        methods: {\r            deleteApp(domainsId) {\r                mainApi().delete('apps/' + this.$route.params.name + '/domains/' + domainsId, {})\r                    .then(response => {\r                        const tmp = [];\r                        this.domains.forEach(function(elem) {\r                            if (elem.id !== domainsId)\r                                tmp.push(elem);\r                        });\r                        this.domains = tmp;\r                        this.color = \"warning\";\r                        this.snackmsg = \"Domain successfully deleted.\";\r                        this.snackbar = true;\r                        next(response);\r                    }).catch(e => {\r                        this.color = \"error\";\r                        this.snackmsg = \"An error has occured : \" + e;\r                        this.snackbar = true;\r                })\r            },\r            addDomain() {\r                mainApi().post('apps/' + this.$route.params.name + \"/domains\", {\r                    domain: {\r                        name: this.newDomain\r                    }\r                }).then(response => {\r                    this.domains.push(response.data.domain);\r                    this.newDomain = \"\";\r                    this.color = \"success\";\r                    this.snackmsg = \"Domain successfully added.\";\r                    this.snackbar = true;\r                }).catch(e => {\r                    this.color = \"error\";\r                    this.snackmsg = \"Domain already taken or wrong format.\";\r                    this.snackbar = true;\r                })\r            }\r        },\r        created() {\r            this.$multiwatch(['newDomain'], function() {\r                this.isDisabled = this.newDomain === \"\";\r            });\r\r            mainApi().get('/apps/' + this.$route.params.name + '/domains', {})\r                .then(response => {\r                    this.domains = response.data.domains;\r                }).catch(e => {\r                    this.color = \"error\";\r                    this.snackmsg = \"An error has occured : \" + e;\r                    this.snackbar = true;\r            })\r        }\r    }\r",{"version":3,"sources":["AppsSettings.vue"],"names":[],"mappings":"AAAA","file":"AppsSettings.vue","sourceRoot":"src/views","sourcesContent":["<template>\r    <v-container fill-height>\r        <v-layout wrap >\r            <v-flex\r                    text-xs-right\r                    xs12\r                    md8\r            >\r                <v-text-field\r                        label=\"Domain name\"\r                        v-model=\"newDomain\"\r                        class=\"add-domains-field\"\r                        required\r                >\r                </v-text-field>\r                <v-btn\r                        @click=\"addDomain\"\r                        :disabled=\"isDisabled\"\r                >\r                    Link to this app\r                </v-btn>\r            </v-flex>\r\r            <v-data-table\r                    :headers=\"headers\"\r                    :items=\"domains\"\r                    class=\"card-apps\"\r\r            >\r                <template slot=\"items\" slot-scope=\"props\">\r                    <td >{{ props.item.name }}</td>\r                    <td class=\"text-xs-left\">{{ props.item.id }}</td>\r                    <td v-if=\"!props.item.ssl\" class=\"text-xs-left\">Disabled</td>\r                    <td v-else class=\"text-xs-left\">Enabled</td>\r                    <td class=\"text-xs-left\">{{ props.item.created_at }}</td>\r                    <td>\r                        <v-btn\r                                flat\r                                icon\r                                color=\"red\"\r                                @click=\"deleteApp(props.item.id)\"\r                        >\r                            <v-icon>highlight_off</v-icon>\r                        </v-btn>\r                    </td>\r                </template>\r            </v-data-table>\r        </v-layout>\r        <v-snackbar\r                v-model=\"snackbar\"\r                bottom\r                center\r                :timeout=\"timeout\"\r                :color=\"color\"\r        >\r            {{ snackmsg }}\r            <v-btn\r                    flat\r                    @click=\"snackbar = false\"\r            >\r                Close\r            </v-btn>\r        </v-snackbar>\r    </v-container>\r</template>\r\r<script>\r    import mainApi from \"../api/mainApi\";\r\r    export default {\r        name: \"AppsSettings\",\r        data: function () {\r            return {\r                isDisabled: true,\r                snackbar: false,\r                color: \"\",\r                timeout: 6000,\r                valid: true,\r                domains: [],\r                dialog: false,\r                deleteActive: false,\r                newDomain: \"\",\r                snackmsg: \"\",\r                headers: [\r                    {\r                        text: 'Domains',\r                        align: 'left',\r                        sortable: false,\r                        value: 'name'\r                    },\r                    { text: 'Id', value: 'Id'},\r                    { text: 'Status', value: 'Status' },\r                    { text: 'Creation', value: 'Creation' },\r                    { text: 'Settings', value: 'Settings' }\r                ],\r            }\r        },\r        methods: {\r            deleteApp(domainsId) {\r                mainApi().delete('apps/' + this.$route.params.name + '/domains/' + domainsId, {})\r                    .then(response => {\r                        const tmp = [];\r                        this.domains.forEach(function(elem) {\r                            if (elem.id !== domainsId)\r                                tmp.push(elem);\r                        });\r                        this.domains = tmp;\r                        this.color = \"warning\";\r                        this.snackmsg = \"Domain successfully deleted.\";\r                        this.snackbar = true;\r                        next(response);\r                    }).catch(e => {\r                        this.color = \"error\";\r                        this.snackmsg = \"An error has occured : \" + e;\r                        this.snackbar = true;\r                })\r            },\r            addDomain() {\r                mainApi().post('apps/' + this.$route.params.name + \"/domains\", {\r                    domain: {\r                        name: this.newDomain\r                    }\r                }).then(response => {\r                    this.domains.push(response.data.domain);\r                    this.newDomain = \"\";\r                    this.color = \"success\";\r                    this.snackmsg = \"Domain successfully added.\";\r                    this.snackbar = true;\r                }).catch(e => {\r                    this.color = \"error\";\r                    this.snackmsg = \"Domain already taken or wrong format.\";\r                    this.snackbar = true;\r                })\r            }\r        },\r        created() {\r            this.$multiwatch(['newDomain'], function() {\r                this.isDisabled = this.newDomain === \"\";\r            });\r\r            mainApi().get('/apps/' + this.$route.params.name + '/domains', {})\r                .then(response => {\r                    this.domains = response.data.domains;\r                }).catch(e => {\r                    this.color = \"error\";\r                    this.snackmsg = \"An error has occured : \" + e;\r                    this.snackbar = true;\r            })\r        }\r    }\r</script>\r\r<style scoped>\r    .add-domains-field {\r        padding-top: 7em;\r    }\r    .card-apps {\r        padding-top: 7em;\r        height: 100%;\r        width: 100%;\r        margin-right: auto;\r    }\r</style>"]}]}