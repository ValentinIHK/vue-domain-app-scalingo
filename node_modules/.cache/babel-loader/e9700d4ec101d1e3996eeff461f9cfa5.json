{"remainingRequest":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/babel-loader/lib/index.js!/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/vuetify-loader/lib/loader.js!/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/src/views/AppsSettings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/src/views/AppsSettings.vue","mtime":1549284964978},{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/vuetify-loader/lib/loader.js","mtime":1548745995000},{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/valentin/Documents/Pro/vuejs-domain-app-scalingo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport mainApi from \"../api/mainApi\";\nimport axios from \"axios\";\nimport store from \"../store\";\nexport default {\n  name: \"AppsSettings\",\n  data: function data() {\n    return {\n      isDisabled: true,\n      snackbar: false,\n      color: \"\",\n      timeout: 6000,\n      valid: true,\n      domains: [],\n      dialog: false,\n      deleteActive: false,\n      newDomain: \"\",\n      snackmsg: \"\",\n      headers: [{\n        text: 'Domains',\n        align: 'left',\n        sortable: false,\n        value: 'name'\n      }, {\n        text: 'Id',\n        value: 'Id'\n      }, {\n        text: 'Status',\n        value: 'Status'\n      }, {\n        text: 'Creation',\n        value: 'Creation'\n      }, {\n        text: 'Settings',\n        value: 'Settings'\n      }]\n    };\n  },\n  methods: {\n    deleteApp: function deleteApp(domainsId) {\n      var _this = this;\n\n      mainApi().delete('apps/' + this.$route.params.name + '/domains/' + domainsId, {}).then(function (response) {\n        var tmp = [];\n\n        _this.domains.forEach(function (elem) {\n          if (elem.id !== domainsId) tmp.push(elem);\n        });\n\n        _this.domains = tmp;\n        _this.color = \"warning\";\n        _this.snackmsg = \"Domain successfully deleted.\";\n        _this.snackbar = true;\n      }).catch(function (e) {\n        _this.color = \"error\";\n        _this.snackmsg = \"An error has occured : \" + e;\n        _this.snackbar = true;\n      });\n    },\n    addDomain: function addDomain() {\n      var _this2 = this;\n\n      mainApi().post('apps/' + this.$route.params.name + \"/domains\", {\n        domain: {\n          name: this.newDomain\n        }\n      }).then(function (response) {\n        _this2.domains.push(response.data.domain);\n\n        _this2.newDomain = \"\";\n        _this2.color = \"success\";\n        _this2.snackmsg = \"Domain successfully added.\";\n        _this2.snackbar = true;\n      }).catch(function (e) {\n        _this2.color = \"error\";\n        _this2.snackmsg = \"Domain already taken or wrong format.\";\n        _this2.snackbar = true;\n      });\n    }\n  },\n  created: function created() {\n    var _this3 = this;\n\n    this.$multiwatch(['newDomain'], function () {\n      this.isDisabled = this.newDomain === \"\";\n    });\n    mainApi().get('/apps/' + this.$route.params.name + '/domains', {}).then(function (response) {\n      _this3.domains = response.data.domains;\n    }).catch(function (e) {\n      _this3.color = \"error\";\n      _this3.snackmsg = \"An error has occured : \" + e;\n      _this3.snackbar = true;\n    });\n  }\n};",{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["\r    import mainApi from \"../api/mainApi\";\r    import axios from \"axios\";\r    import store from \"../store\";\r\r    export default {\r        name: \"AppsSettings\",\r        data: function () {\r            return {\r                isDisabled: true,\r                snackbar: false,\r                color: \"\",\r                timeout: 6000,\r                valid: true,\r                domains: [],\r                dialog: false,\r                deleteActive: false,\r                newDomain: \"\",\r                snackmsg: \"\",\r                headers: [\r                    {\r                        text: 'Domains',\r                        align: 'left',\r                        sortable: false,\r                        value: 'name'\r                    },\r                    { text: 'Id', value: 'Id'},\r                    { text: 'Status', value: 'Status' },\r                    { text: 'Creation', value: 'Creation' },\r                    { text: 'Settings', value: 'Settings' }\r                ],\r            }\r        },\r        methods: {\r            deleteApp(domainsId) {\r                mainApi().delete('apps/' + this.$route.params.name + '/domains/' + domainsId, {})\r                    .then(response => {\r                        const tmp = [];\r                        this.domains.forEach(function(elem) {\r                            if (elem.id !== domainsId)\r                                tmp.push(elem);\r                        });\r                        this.domains = tmp;\r                        this.color = \"warning\";\r                        this.snackmsg = \"Domain successfully deleted.\";\r                        this.snackbar = true;\r                    }).catch(e => {\r                        this.color = \"error\";\r                        this.snackmsg = \"An error has occured : \" + e;\r                        this.snackbar = true;\r                })\r            },\r            addDomain() {\r                mainApi().post('apps/' + this.$route.params.name + \"/domains\", {\r                    domain: {\r                        name: this.newDomain\r                    }\r                }).then(response => {\r                    this.domains.push(response.data.domain);\r                    this.newDomain = \"\";\r                    this.color = \"success\";\r                    this.snackmsg = \"Domain successfully added.\";\r                    this.snackbar = true;\r                }).catch(e => {\r                    this.color = \"error\";\r                    this.snackmsg = \"Domain already taken or wrong format.\";\r                    this.snackbar = true;\r                })\r            }\r        },\r        created() {\r            this.$multiwatch(['newDomain'], function() {\r                this.isDisabled = this.newDomain === \"\";\r            });\r\r            mainApi().get('/apps/' + this.$route.params.name + '/domains', {})\r                .then(response => {\r                    this.domains = response.data.domains;\r                }).catch(e => {\r                this.color = \"error\";\r                this.snackmsg = \"An error has occured : \" + e;\r                this.snackbar = true;\r            })\r        }\r    }\r"],"sourceRoot":"src/views"}]}